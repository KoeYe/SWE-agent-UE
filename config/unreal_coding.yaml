agent:
  model:
    name: openai/Qwen/Qwen2.5-VL-32B-Instruct
    # api_base: http://132.239.95.133:8000/v1
    api_base: http://127.0.0.1:8000/v1
    per_instance_cost_limit: 0
    total_cost_limit: 0
    # Set context window limits for Qwen model to prevent overflow
    max_input_tokens: 120000  # Conservative limit for 128k context window
    max_output_tokens: 4096
  templates:
    disable_image_processing: false
    system_template: |-
      You are a helpful assistant that can interact with Unreal server and local workspace to solve tasks.

      You have access to the following tools:
      {{command_docs}}

      ## Working Environment
      - You are working on remote, you can interact with Unreal instance via Unreal MCP tools
      - You can use {{workspace}} as your local workspace, but you can only interact with Unreal via `mcp_call`
      - You can use MCP `execute_python_script` to execute given Python script content or any valid Python tools shown in `mcp_call list_python_scripts`
      - Always use simple, direct commands
      
      ## Command Guidelines
      - For file operations: use edit_file, str_replace_editor, or simple echo/cat
      - All file paths are automatically relative to workspace ({{workspace}}) when using relative paths
      - For example: `str_replace_editor create record_camera.py --file_text "content"` will create file in workspace
      - For MCP operations: use mcp_call <tool_name> --param=value format
      - Always use `mcp_call api_doc_query --query="<query_content>"` to check the usage of Python APIs before you scripting Unreal Python scripts
      - Always use `mcp_call execute_python_script --script="<unreal_python_code>"` to execute your self python scripts
      - Always use `mcp_call execute_python_script --path="<unreal_python_script_paths>"` to execute given python scripts, the scripts must be given in `mcp_call list_python_tools`
      - You can use `mcp_call execute_python_script --script="$(cat <local_script_path>)"` to load local python scripts and send content to Unreal through using script parameter.
      - Avoid complex command combinations or pipes that might hang
      - If response is too long and saved to local workspace, use `sed -n '10,20p' filename.py` to check part of the output file. Do not read all long response at once.
      
      ## MCP Command Examples
      - Query API documentation: `mcp_call api_doc_query --query="unreal.EditorLevelUtils"`
      - Execute inline script: `mcp_call execute_python_script --script="import unreal; print('Hello from Unreal!')"`
      - Execute script file: `mcp_call execute_python_script --path="my_script.py"`
      - Load and execute local file: `mcp_call execute_python_script --script="$(cat local_script.py)"`
      - List available scripts: `mcp_call list_python_tools`
      
      ## Response Format
      Always format your responses exactly like this:
      
      DISCUSSION
      Explain what you're thinking and what you plan to do next.
      
      ```
      simple_command_here
      ```

      When the task is complete, use:
      ```
      exit
      ```
    instance_template: |-
      ## Task Description
      {{problem_statement}}

      ## Instructions  
      You are working remotely and have no access to Unreal instance. All the actions you can take is based on Unreal MCP tools.
      
      Your goal is to:
      1. Check if MCP tools are available by trying: list_mcp_tools
      2. If MCP server is running, Check all valid python scripts by trying: mcp_call list_python_scripts
      3. Use MCP commands like: mcp_call <tool_name> <tool_params>
      4. Document what you find and what capabilities are available in workspace
      
      Start with simple exploration. Use one command at a time.
      
      ## Available Commands
      - MCP testing: list_mcp_tools, mcp_call <tool_name> <tool_params>
      - File operations: edit_file, str_replace_editor
    next_step_template: |-
      OBSERVATION:
      {{observation}}
    next_step_no_output_template: |-
      Your command ran successfully and did not produce any output.
  tools:
    execution_timeout: 15
    max_consecutive_execution_timeouts: 2
    env_variables:
      PAGER: cat
      MANPAGER: cat
      LESS: -R
      PIP_PROGRESS_BAR: 'off'
      TQDM_DISABLE: '1'
      GIT_PAGER: cat
      UNREAL_MCP_URL: "http://34.212.62.153:9000/sse"
      ROOT: "/home/koe/workspace"
      SWE_AGENT_ENV_FILE: "/home/koe/.swe-agent-env"
    bundles:
      - path: tools/registry
      - path: tools/edit_anthropic
      - path: tools/image_tools
      - path: tools/unreal_mcp
    registry_variables:
      USE_FILEMAP: 'true'
      SUBMIT_REVIEW_MESSAGES:
        - |
          Thank you for your work on this issue. Please carefully follow the steps below to help review your changes.

          1. If you made any changes to your code after running the reproduction script, please run the reproduction script again.
            If the reproduction script is failing, please revisit your changes and make sure they are correct.
            If you have already removed your reproduction script, please ignore this step.
          2. Remove your reproduction script (if you haven't done so already).
          3. If you have modified any TEST files, please revert them to the state they had before you started fixing the issue.
            You can do this with `git checkout -- /path/to/test/file.py`. Use below <diff> to find the files you need to revert.
          4. Run the submit command again to confirm.

          Here is a list of all of your changes:

          <diff>
          {{diff}}
          </diff>
    enable_bash_tool: true
    parse_function:
      type: thought_action
  history_processors:
    - type: image_parsing
    - type: cache_control
      last_n_messages: 2
env:
  deployment:
    type: local
  repo:
    type: no_git
    path: '/home/koe/workspace'